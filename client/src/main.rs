use std::net::UdpSocket;
//use std::thread;

fn main() {
    test2();
}

fn test1() {
    let socket = UdpSocket::bind("0.0.0.0:22222").unwrap();
    let buf = [
        0x20, 0x05, 0x00, 0x15, 0x00, 0x00, 0x01, 0x00, 0x00, 0x3c, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x60, 0x00, 0x04, 0xce, 0x0b, 0xd6, 0x5d,
    ];
    socket.send_to(&buf[0..25], "192.168.119.36:8888").unwrap();
    //socket.send_to(&buf[0..25], "192.168.1.7:8888").unwrap();
    //thread::sleep_ms(1000);
}

fn test2() {
    let socket = UdpSocket::bind("0.0.0.0:22222").unwrap();
    let buf = [
        0x21, 0x32, 0x01, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7a,
        0x00, 0x00, 0x01, 0x00, 0x56, 0x00, 0x02, 0x00, 0x1f, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00,
        0x15, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xa8, 0x0c, 0xb8, 0x00, 0x16, 0x00,
        0x04, 0x03, 0x65, 0x70, 0x63, 0x00, 0x7c, 0x00, 0x01, 0x09, 0x00, 0x1d, 0x00, 0x04, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x38, 0x00, 0x02, 0x00, 0x01, 0x00, 0x51, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x09, 0x00, 0x5f, 0x00, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x48, 0x00, 0x02, 0x00, 0x16, 0x00, 0x14, 0x00, 0x01, 0x01, 0x00,
        0x16, 0x00, 0x04, 0x03, 0x65, 0x70, 0x63, 0x00, 0x5d, 0x00, 0x05, 0x06, 0xac, 0x14, 0xe7,
        0x01, 0x00, 0x1d, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0x00, 0x38, 0x00, 0x02, 0x00, 0x02,
        0x00, 0x51, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x6d, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x01, 0x00, 0x39, 0x00, 0x02, 0x00, 0x1a, 0x00, 0x14, 0x00, 0x01, 0x03,
        0x00, 0x15, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
        0x00, 0x04, 0x03, 0x65, 0x70, 0x63, 0x00, 0x1d, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0x00,
        0x38, 0x00, 0x02, 0x00, 0x03, 0x00, 0x5f, 0x00, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x32, 0x00, 0x04, 0x00, 0x21, 0x00, 0x16, 0x00, 0x04,
        0x03, 0x65, 0x70, 0x63, 0x00, 0x1e, 0x00, 0x02, 0x26, 0xff, 0x00, 0x2a, 0x00, 0x01, 0x00,
        0x00, 0x54, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xa8, 0x0c, 0xb8, 0x00,
        0x2c, 0x00, 0x01, 0x02, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00,
        0x1c, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x1e, 0x00, 0x02, 0x26, 0xff, 0x00, 0x2a, 0x00, 0x01,
        0x01, 0x00, 0x2c, 0x00, 0x01, 0x02, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x0d, 0x00, 0x2c, 0x00, 0x01, 0x04, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x06, 0x00, 0x1b, 0x00, 0x25, 0x00, 0x02, 0x01, 0x00, 0x00, 0x3e, 0x00, 0x01,
        0x02, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x09, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x19, 0x00, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x0a,
        0x00, 0x00, 0x98, 0x96, 0x80, 0x00, 0x00, 0x98, 0x96, 0x80, 0x00, 0x6d, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x12, 0x00, 0x19, 0x00, 0x01, 0x00, 0x00, 0x6d, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7c, 0x00, 0x01, 0x09, 0x00, 0x39, 0x00, 0x0d, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x01, 0x01,
    ];
    socket.send_to(&buf[0..25], "192.168.119.36:8888").unwrap();
}
